{"ast":null,"code":"import { createAsyncThunk, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { request } from '@config/fetchConfig';\nconst initialState = {\n  message: null,\n  error: null,\n  isLoading: false\n};\nexport const login = createAsyncThunk('auth/register', async (_ref, _ref2) => {\n  let {\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const response = await request('/api/auth/register', 'POST', {\n      email,\n      password\n    });\n    return response.data;\n  } catch (err) {\n    let error = err;\n\n    if (!error.response) {\n      throw err;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\nexport const registerSlice = createSlice({\n  name: 'register',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(login.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.message = payload.message;\n      state.error = null;\n      state.isLoading = false;\n    });\n    builder.addCase(login.rejected, (state, action) => {\n      if (action.payload) {\n        state.message = null;\n        state.error = action.payload;\n        state.isLoading = false;\n      } else {\n        state.message = null;\n        state.error = action.error.message;\n        state.isLoading = false;\n      }\n    });\n  }\n});\n\nconst selectRegisterState = state => state.register;\n\nexport const selectorRegister = createSelector(selectRegisterState, state => ({\n  message: state.message,\n  error: state.error,\n  isLoading: state.isLoading\n}));\nexport default registerSlice.reducer;","map":{"version":3,"sources":["/home/artem/mern/client/src/store/registration/register.slice.js"],"names":["createAsyncThunk","createSlice","createSelector","request","initialState","message","error","isLoading","login","email","password","rejectWithValue","response","data","err","registerSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","payload","rejected","action","selectRegisterState","register","selectorRegister","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,EAAwCC,cAAxC,QAA8D,kBAA9D;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAArB;AAMA,OAAO,MAAMC,KAAK,GAAGR,gBAAgB,CAAC,eAAD,EAAkB,uBAAoD;AAAA,MAA7C;AAAES,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA6C;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACzG,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMT,OAAO,CAAC,oBAAD,EAAuB,MAAvB,EAA+B;AAAEM,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA/B,CAA9B;AAEA,WAAOE,QAAQ,CAACC,IAAhB;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZ,QAAIR,KAAK,GAAGQ,GAAZ;;AAEA,QAAI,CAACR,KAAK,CAACM,QAAX,EAAqB;AACnB,YAAME,GAAN;AACD;;AAED,WAAOH,eAAe,CAACL,KAAK,CAACM,QAAN,CAAeC,IAAhB,CAAtB;AACD;AACF,CAdoC,CAA9B;AAgBP,OAAO,MAAME,aAAa,GAAGd,WAAW,CAAC;AACvCe,EAAAA,IAAI,EAAE,UADiC;AAEvCZ,EAAAA,YAFuC;AAGvCa,EAAAA,QAAQ,EAAE,EAH6B;AAIvCC,EAAAA,aAAa,EAAEC,OAAO,IAAI;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,KAAK,CAACa,OAAtB,EAA+BC,KAAK,IAAI;AACtCA,MAAAA,KAAK,CAACf,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAY,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,KAAK,CAACe,SAAtB,EAAiC,CAACD,KAAD,YAAwB;AAAA,UAAhB;AAAEE,QAAAA;AAAF,OAAgB;AACvDF,MAAAA,KAAK,CAACjB,OAAN,GAAgBmB,OAAO,CAACnB,OAAxB;AACAiB,MAAAA,KAAK,CAAChB,KAAN,GAAc,IAAd;AACAgB,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACD,KAJD;AAKAY,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,KAAK,CAACiB,QAAtB,EAAgC,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACjD,UAAIA,MAAM,CAACF,OAAX,EAAoB;AAClBF,QAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,QAAAA,KAAK,CAAChB,KAAN,GAAcoB,MAAM,CAACF,OAArB;AACAF,QAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACD,OAJD,MAIO;AACLe,QAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,QAAAA,KAAK,CAAChB,KAAN,GAAcoB,MAAM,CAACpB,KAAP,CAAaD,OAA3B;AACAiB,QAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACD;AACF,KAVD;AAWD;AAxBsC,CAAD,CAAjC;;AA2BP,MAAMoB,mBAAmB,GAAGL,KAAK,IAAIA,KAAK,CAACM,QAA3C;;AAEA,OAAO,MAAMC,gBAAgB,GAAG3B,cAAc,CAACyB,mBAAD,EAAsBL,KAAK,KAAK;AAC5EjB,EAAAA,OAAO,EAAEiB,KAAK,CAACjB,OAD6D;AAE5EC,EAAAA,KAAK,EAAEgB,KAAK,CAAChB,KAF+D;AAG5EC,EAAAA,SAAS,EAAEe,KAAK,CAACf;AAH2D,CAAL,CAA3B,CAAvC;AAMP,eAAeQ,aAAa,CAACe,OAA7B","sourcesContent":["import { createAsyncThunk, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { request } from '@config/fetchConfig';\n\nconst initialState = {\n  message: null,\n  error: null,\n  isLoading: false,\n};\n\nexport const login = createAsyncThunk('auth/register', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const response = await request('/api/auth/register', 'POST', { email, password });\n\n    return response.data;\n  } catch (err) {\n    let error = err;\n\n    if (!error.response) {\n      throw err;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\n\nexport const registerSlice = createSlice({\n  name: 'register',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(login.fulfilled, (state, { payload }) => {\n      state.message = payload.message;\n      state.error = null;\n      state.isLoading = false;\n    });\n    builder.addCase(login.rejected, (state, action) => {\n      if (action.payload) {\n        state.message = null;\n        state.error = action.payload;\n        state.isLoading = false;\n      } else {\n        state.message = null;\n        state.error = action.error.message;\n        state.isLoading = false;\n      }\n    });\n  },\n});\n\nconst selectRegisterState = state => state.register;\n\nexport const selectorRegister = createSelector(selectRegisterState, state => ({\n  message: state.message,\n  error: state.error,\n  isLoading: state.isLoading,\n}));\n\nexport default registerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}