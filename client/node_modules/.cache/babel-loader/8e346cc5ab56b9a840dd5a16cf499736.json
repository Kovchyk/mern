{"ast":null,"code":"import { createAsyncThunk, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { request } from '../../config/fetchConfig';\nimport { STORAGE_NAME } from '../../services/constants';\nconst initialState = {\n  token: null,\n  userId: null\n};\nexport const login = createAsyncThunk('auth/login', async (_ref, _ref2) => {\n  let {\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const response = await request('/api/auth/login', 'POST', {\n      email,\n      password\n    });\n    localStorage.setItem(STORAGE_NAME, JSON.stringify({\n      userId: response.data.userId,\n      token: response.data.token\n    }));\n    return response.data;\n  } catch (err) {\n    let error = err;\n\n    if (!error.response) {\n      throw err;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: {\n      reducer: state => {\n        state.token = null;\n        state.userId = null;\n        localStorage.removeItem(STORAGE_NAME);\n      }\n    },\n    getAuthLocalStorage: {\n      reducer: (state, action) => {\n        state.token = action.payload.token;\n        state.userId = action.payload.userId;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.token = payload.token;\n      state.userId = payload.userId;\n    });\n    builder.addCase(login.rejected, (state, action) => {\n      if (action.payload) {\n        state.error = action.payload.errorMessage;\n      } else {\n        state.error = action.error.message;\n      }\n    });\n  }\n});\n\nconst selectAuthState = state => state.auth;\n\nexport const selectorAuth = createSelector(selectAuthState, state => ({\n  token: state.token,\n  userId: state.userId\n}));\nexport const {\n  logout,\n  getAuthLocalStorage\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/home/artem/mern/client/src/store/authentification/auth.slice.js"],"names":["createAsyncThunk","createSlice","createSelector","request","STORAGE_NAME","initialState","token","userId","login","email","password","rejectWithValue","response","localStorage","setItem","JSON","stringify","data","err","error","authSlice","name","reducers","logout","reducer","state","removeItem","getAuthLocalStorage","action","payload","extraReducers","builder","addCase","fulfilled","rejected","errorMessage","message","selectAuthState","auth","selectorAuth","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, createSelector } from '@reduxjs/toolkit';\nimport { request } from '../../config/fetchConfig';\nimport { STORAGE_NAME } from '../../services/constants';\n\nconst initialState = {\n  token: null,\n  userId: null,\n};\n\nexport const login = createAsyncThunk('auth/login', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const response = await request('/api/auth/login', 'POST', { email, password });\n\n    localStorage.setItem(STORAGE_NAME, JSON.stringify({ userId: response.data.userId, token: response.data.token }));\n\n    return response.data;\n  } catch (err) {\n    let error = err;\n\n    if (!error.response) {\n      throw err;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: {\n      reducer: state => {\n        state.token = null;\n        state.userId = null;\n        localStorage.removeItem(STORAGE_NAME);\n      },\n    },\n    getAuthLocalStorage: {\n      reducer: (state, action) => {\n        state.token = action.payload.token;\n        state.userId = action.payload.userId;\n      },\n    },\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, { payload }) => {\n      state.token = payload.token;\n      state.userId = payload.userId;\n    });\n    builder.addCase(login.rejected, (state, action) => {\n      if (action.payload) {\n        state.error = action.payload.errorMessage;\n      } else {\n        state.error = action.error.message;\n      }\n    });\n  },\n});\n\nconst selectAuthState = state => state.auth;\n\nexport const selectorAuth = createSelector(selectAuthState, state => ({\n  token: state.token,\n  userId: state.userId,\n}));\n\nexport const { logout, getAuthLocalStorage } = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}